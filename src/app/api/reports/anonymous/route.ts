import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { encrypt } from '@/lib/encryption';
import { generateReportId, generateTrackingCode } from '@/lib/utils';
import { ReportSchema, validateInput, prepareSqlParams } from '@/lib/input-validation';

export async function POST(request: NextRequest) {
    // Wrapper global pour capturer TOUTES les erreurs
    try {
        console.log('üì• Nouveau signalement anonyme re√ßu (Next.js)');
        console.log('üåê Headers:', Object.fromEntries(request.headers.entries()));
        
        // Parsing JSON avec protection
        let body;
        try {
            body = await request.json();
            console.log('üìã Donn√©es re√ßues:', JSON.stringify(body, null, 2));
        } catch (parseError: any) {
            console.error('‚ùå Erreur parsing JSON request:', parseError);
            return NextResponse.json({ 
                error: 'Donn√©es JSON invalides',
                details: ['Le format des donn√©es envoy√©es est incorrect']
            }, { status: 400 });
        }
        
        // Debug des donn√©es avant validation
        console.log('üîç Analyse des donn√©es re√ßues:');
        Object.keys(body).forEach(key => {
            const value = body[key];
            console.log(`  ${key}: ${typeof value} = ${value === undefined ? 'UNDEFINED' : value === null ? 'NULL' : JSON.stringify(value).substring(0, 100)}`);
        });
        
        // Validation compl√®te avec Zod
        console.log('üîç D√©but validation Zod...');
        const validationResult = validateInput(ReportSchema, body);
        
        if (!validationResult.success) {
            console.log('‚ùå Validation Zod √©chou√©e - d√©tails complets:');
            console.log('üìã Erreurs:', validationResult.errors);
            console.log('üìã Donn√©es qui ont √©chou√©:', JSON.stringify(body, null, 2));
            
            return NextResponse.json({ 
                error: 'Donn√©es invalides',
                details: validationResult.errors
            }, { status: 400 });
        }
        
        console.log('‚úÖ Validation Zod r√©ussie');

        const validatedData = validationResult.data;
        const {
            corruptionType, sector, sectorName, severity, incidentDate, location, description,
            amountRange, suspectNames, suspectPositions, suspectInstitution, witnesses,
            relationToFacts, anonymity, reporterName, reporterPhone, reporterEmail,
            urgency, circumstances, frequency, impact, witnessContacts, files
        } = validatedData;
        
        // Mapper les montants vers des valeurs num√©riques pour la base de donn√©es
        let amount = null;
        if (amountRange) {
            const amountMapping: Record<string, number> = {
                'moins_100000': 50000,
                '100000_1000000': 500000,
                '1000000_10000000': 5000000,
                '10000000_100000000': 50000000,
                'plus_100000000': 200000000
            };
            amount = amountMapping[amountRange] || null;
        }
        
        // Mapper la gravit√© pour la base de donn√©es
        const severityMapping: Record<string, string> = {
            'faible': 'low',
            'moyen': 'medium', 
            'eleve': 'high',
            'critique': 'critical'
        };
        const mappedSeverity = severityMapping[severity] || severity;
        
        // Mapper l'anonymat pour la base de donn√©es
        const anonymityMapping: Record<string, string> = {
            'total': 'anonymous',
            'partiel': 'confidential',
            'aucun': 'public'
        };
        const mappedAnonymity = anonymityMapping[anonymity] || anonymity;
        
        console.log('‚úÖ Validation s√©curis√©e r√©ussie pour nouveau signalement anonyme');

        // G√©n√©rer IDs uniques (avec gestion d'erreur)
        let reportId, trackingCode;
        try {
            reportId = generateReportId();
            trackingCode = generateTrackingCode();
            console.log('üÜî IDs g√©n√©r√©s:', { reportId, trackingCode });
        } catch (idError: any) {
            console.error('‚ùå Erreur g√©n√©ration IDs:', idError.message);
            return NextResponse.json({ 
                error: 'Erreur de g√©n√©ration des identifiants',
                details: ['Impossible de g√©n√©rer les identifiants uniques']
            }, { status: 500 });
        }

        // Chiffrer les donn√©es personnelles si fournies (avec gestion d'erreur)
        let encryptedName = null;
        let encryptedPhone = null; 
        let encryptedEmail = null;
        
        try {
            encryptedName = reporterName ? encrypt(reporterName) : null;
            encryptedPhone = reporterPhone ? encrypt(reporterPhone) : null;
            encryptedEmail = reporterEmail ? encrypt(reporterEmail) : null;
            console.log('üîê Chiffrement des donn√©es personnelles r√©ussi');
        } catch (encryptionError: any) {
            console.error('‚ùå Erreur de chiffrement:', encryptionError.message);
            return NextResponse.json({ 
                error: 'Erreur de configuration de s√©curit√©',
                details: ['Le syst√®me de chiffrement n\'est pas correctement configur√©']
            }, { status: 503 });
        }

        // Informations de tra√ßabilit√© (non personnelles)
        const ipAddress = request.headers.get('x-forwarded-for') || 
                         request.headers.get('x-real-ip') || 
                         'unknown';
        const userAgent = request.headers.get('user-agent') || 'unknown';

        // Traiter les fichiers
        const filesJson = files && Array.isArray(files) ? JSON.stringify(files) : JSON.stringify([]);

        console.log('üíæ Insertion en base de donn√©es...');
        console.log('üìä Donn√©es mapp√©es:', { 
            corruptionType, 
            sector, 
            severity: mappedSeverity, 
            anonymity: mappedAnonymity,
            amount 
        });

        console.log('üíæ Insertion en base de donn√©es avec Prisma...');
        
        try {
            // Ins√©rer le signalement avec Prisma
            const report = await prisma.report.create({
                data: {
                    id: reportId,
                    userId: null,
                    corruptionType,
                    sector,
                    severity: mappedSeverity,
                    incidentDate: new Date(incidentDate),
                    location,
                    description,
                    amount,
                    suspectNames: suspectNames || null,
                    suspectPositions: suspectPositions || null,
                    suspectInstitution: suspectInstitution || null,
                    witnesses: witnesses || null,
                    relationToFacts,
                    anonymityLevel: mappedAnonymity,
                    reporterNameEncrypted: encryptedName,
                    reporterPhoneEncrypted: encryptedPhone,
                    reporterEmailEncrypted: encryptedEmail,
                    trackingCode,
                    files: filesJson,
                    ipAddress,
                    userAgent
                }
            });

            console.log(`‚úÖ Signalement anonyme Next.js cr√©√©: ${reportId} (Suivi: ${trackingCode})`);
            if (files && files.length > 0) {
                console.log(`üìé ${files.length} fichier(s) joint(s)`);
            }

            return NextResponse.json({
                message: 'Signalement soumis avec succ√®s',
                reportId: reportId,
                trackingCode: trackingCode,
                status: 'new',
                filesCount: files ? files.length : 0,
                info: 'Conservez votre code de suivi pour suivre l\'√©volution de votre signalement',
                currency: 'FCFA'
            });
        } catch (dbError: any) {
            console.error('‚ùå Erreur insertion signalement:', dbError);
            return NextResponse.json({ 
                error: 'Erreur lors de l\'enregistrement du signalement',
                details: ['Impossible d\'enregistrer le signalement en base de donn√©es']
            }, { status: 500 });
        }
    } catch (error: any) {
        // GESTION ULTIME DE TOUTES LES ERREURS POSSIBLES
        console.error('‚ùå ERREUR CRITIQUE INTERCEPT√âE:', error);
        console.error('üìç Stack trace complet:', error.stack);
        console.error('üìã Type d\'erreur:', typeof error);
        console.error('üìã Propri√©t√©s:', Object.getOwnPropertyNames(error));
        
        // Forcer la cr√©ation d'une r√©ponse JSON valide quoi qu'il arrive
        try {
            let errorMessage = 'Erreur serveur inconnue';
            let errorDetails = ['Une erreur inattendue s\'est produite'];
            let statusCode = 500;
            
            if (error instanceof Error) {
                errorMessage = error.message;
                
                // Classification des erreurs
                if (error.message.includes('S√âCURIT√â') || error.message.includes('ENCRYPTION_KEY')) {
                    errorMessage = 'Configuration de s√©curit√© requise';
                    errorDetails = ['L\'application n√©cessite une configuration s√©curis√©e'];
                    statusCode = 503;
                } else if (error.message.includes('Cannot read properties') || error.message.includes('undefined')) {
                    errorMessage = 'Erreur de traitement des donn√©es';
                    errorDetails = [`Propri√©t√© manquante: ${error.message}`];
                    statusCode = 400;
                } else if (error.message.includes('database') || error.message.includes('SQLITE')) {
                    errorMessage = 'Erreur de base de donn√©es';
                    errorDetails = ['Probl√®me de connexion ou d\'acc√®s √† la base de donn√©es'];
                    statusCode = 500;
                } else if (error.message.includes('validation') || error.message.includes('schema')) {
                    errorMessage = 'Erreur de validation des donn√©es';
                    errorDetails = [error.message];
                    statusCode = 400;
                }
            }
            
            // GARANTIR une r√©ponse JSON valide
            const response = NextResponse.json({ 
                error: errorMessage,
                details: errorDetails,
                timestamp: new Date().toISOString(),
                requestId: Math.random().toString(36).substr(2, 9)
            }, { status: statusCode });
            
            // Forcer le Content-Type JSON
            response.headers.set('Content-Type', 'application/json; charset=utf-8');
            
            return response;
            
        } catch (responseError: any) {
            // FALLBACK ULTIME - Si m√™me la cr√©ation de r√©ponse JSON √©choue
            console.error('‚ùå ERREUR CRITIQUE: Impossible de cr√©er une r√©ponse JSON:', responseError);
            
            // R√©ponse texte brute comme dernier recours
            return new Response(JSON.stringify({
                error: 'Erreur serveur critique',
                details: ['Le serveur ne peut pas traiter la requ√™te'],
                fallback: true
            }), {
                status: 500,
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                }
            });
        }
    }
}