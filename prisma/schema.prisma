datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String     @id @default(cuid())
  name             String?
  email            String     @unique
  emailVerified    DateTime?
  image            String?
  phone            String?
  password         String?
  twoFactorSecret  String?
  isAdmin          Boolean    @default(false)
  createdAt        DateTime   @default(now())
  
  accounts         Account[]
  sessions         Session[]
  reports          Report[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Report {
  id                     String   @id @default(cuid())
  userId                 String?
  corruptionType         String
  sector                 String
  severity               String
  incidentDate           DateTime
  location               String
  description            String
  amount                 Float?
  suspectNames           String?
  suspectPositions       String?
  suspectInstitution     String?
  witnesses              String?
  relationToFacts        String?
  anonymityLevel         String
  reporterNameEncrypted  String?
  reporterPhoneEncrypted String?
  reporterEmailEncrypted String?
  trackingCode           String   @unique
  status                 String   @default("new")
  files                  String?
  ipAddress              String?
  userAgent              String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  user          User?           @relation(fields: [userId], references: [id])
  uploadedFiles UploadedFile[]
}

model UploadedFile {
  id           Int      @id @default(autoincrement())
  reportId     String
  originalName String
  filename     String   // S3 key
  mimetype     String
  size         Int
  path         String   // S3 URL
  uploadDate   DateTime @default(now())
  s3Key        String?  // Cl√© S3 pour suppression
  isPublic     Boolean  @default(false)
  metadata     String?  // JSON metadata

  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model TempCode {
  id        Int      @id @default(autoincrement())
  email     String
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}